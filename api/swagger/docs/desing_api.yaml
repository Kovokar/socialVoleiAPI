openapi: 3.0.0
info:
  title: API Comunidade de Vôlei
  version: 1.0.0
  description: API para comunidade online de praticantes de vôlei com sistema de convites e organização de partidas
servers:
  - url: http://localhost:3000
    description: Servidor local de desenvolvimento
tags:
  - name: auth
    description: Autenticação e registro
  - name: user
    description: Operações de usuário
  - name: invite
    description: Sistema de convites
  - name: match
    description: Gestão de partidas
  - name: rating
    description: Avaliações e reputação

paths:
  # AUTH ENDPOINTS (já existentes)
  /auth/register:
    post:
      tags: 
        - auth
      summary: Registro de usuário (apenas via convite)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nome
                - email
                - senha
                - codigoConvite
                - sexo
                - categoria
              properties:
                nome:
                  type: string
                  example: João Silva
                email:
                  type: string
                  example: joao@email.com
                telefone:
                  type: string
                  example: "(11) 99999-9999"
                longitude:
                  type: number
                  example: -46.6333
                latitude:
                  type: number
                  example: -23.5505
                senha:
                  type: string
                  format: password
                  example: senha123
                codigoConvite:
                  type: string
                  example: "ABC123XYZ"
                sexo:
                  type: string
                  enum: [M, F, Outro]
                  example: M
                categoria:
                  type: string
                  enum: [iniciante, intermediario, avancado, master]
                  example: intermediario
      responses:
        '201':
          description: Usuário registrado com sucesso
        '400':
          description: Dados inválidos ou convite inexistente
        '409':
          description: Email já cadastrado

  /auth/login:
    post:
      tags: 
        - auth
      summary: Login de usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - senha
              properties:
                email:
                  type: string
                  example: joao@email.com
                senha:
                  type: string
                  format: password
                  example: senha123
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  usuario:
                    $ref: '#/components/schemas/Usuario'
        '401':
          description: Credenciais inválidas

  # USER ENDPOINTS
  /userdata:
    get:
      tags:
        - user
      summary: Retorna os dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário autenticado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioCompleto'
        '401':
          description: Não autorizado

  /user/profile:
    put:
      tags:
        - user
      summary: Atualiza perfil do usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                telefone:
                  type: string
                categoria:
                  type: string
                  enum: [iniciante, intermediario, avancado, master]
                longitude:
                  type: number
                latitude:
                  type: number
      responses:
        '200':
          description: Perfil atualizado com sucesso
        '400':
          description: Dados inválidos
        '401':
          description: Não autorizado

  /user/{userId}:
    get:
      tags:
        - user
      summary: Visualizar perfil público de outro usuário
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Perfil público do usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioPublico'
        '404':
          description: Usuário não encontrado

  # INVITE ENDPOINTS
  /invites:
    post:
      tags:
        - invite
      summary: Gerar código de convite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailConvidado:
                  type: string
                  example: novo@email.com
                observacao:
                  type: string
                  example: "Amigo do trabalho, joga bem"
      responses:
        '201':
          description: Convite gerado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  codigoConvite:
                    type: string
                    example: "ABC123XYZ"
                  validade:
                    type: string
                    format: date-time
        '400':
          description: Dados inválidos
        '403':
          description: Usuário não tem permissão para convidar

    get:
      tags:
        - invite
      summary: Listar convites enviados
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de convites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Convite'

  # MATCH ENDPOINTS
  /matches:
    post:
      tags:
        - match
      summary: Criar nova partida
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - horario
                - local
                - categoria
                - maxParticipantes
              properties:
                data:
                  type: string
                  format: date
                  example: "2024-12-15"
                horario:
                  type: string
                  format: time
                  example: "19:00"
                local:
                  type: string
                  example: "Quadra do Clube Atlético"
                endereco:
                  type: string
                  example: "Rua das Flores, 123 - São Paulo/SP"
                categoria:
                  type: string
                  enum: [iniciante, intermediario, avancado, master, mista]
                sexoPermitido:
                  type: string
                  enum: [M, F, mista]
                  example: mista
                maxParticipantes:
                  type: integer
                  example: 12
                custoTotal:
                  type: number
                  format: decimal
                  example: 120.00
                observacoes:
                  type: string
                  example: "Trazer água e toalha"
      responses:
        '201':
          description: Partida criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partida'
        '400':
          description: Dados inválidos

    get:
      tags:
        - match
      summary: Listar partidas disponíveis
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [nova, emAdesao, confirmada, encerrada, realizada]
        - name: categoria
          in: query
          schema:
            type: string
            enum: [iniciante, intermediario, avancado, master, mista]
        - name: dataInicio
          in: query
          schema:
            type: string
            format: date
        - name: dataFim
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de partidas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partida'

  /matches/{matchId}:
    get:
      tags:
        - match
      summary: Detalhes de uma partida específica
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes da partida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartidaCompleta'
        '404':
          description: Partida não encontrada

    put:
      tags:
        - match
      summary: Atualizar partida (apenas organizador)
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: date
                horario:
                  type: string
                  format: time
                local:
                  type: string
                maxParticipantes:
                  type: integer
                custoTotal:
                  type: number
                observacoes:
                  type: string
                status:
                  type: string
                  enum: [nova, emAdesao, confirmada, encerrada, realizada]
      responses:
        '200':
          description: Partida atualizada
        '403':
          description: Apenas organizador pode editar
        '404':
          description: Partida não encontrada

  /matches/{matchId}/join:
    post:
      tags:
        - match
      summary: Solicitar participação em partida
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Solicitação enviada
        '400':
          description: Não é possível participar (categoria incompatível, partida cheia, etc.)
        '409':
          description: Já está inscrito nesta partida

  /matches/{matchId}/leave:
    post:
      tags:
        - match
      summary: Cancelar participação
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Participação cancelada
        '400':
          description: Muito próximo ao horário da partida (penalidade aplicada)

  /matches/{matchId}/participants:
    get:
      tags:
        - match
      summary: Listar participantes da partida
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de participantes
          content:
            application/json:
              schema:
                type: object
                properties:
                  confirmados:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participante'
                  listaEspera:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participante'

    put:
      tags:
        - match
      summary: Gerenciar participantes (aprovar/rejeitar - apenas organizador)
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                acao:
                  type: string
                  enum: [aprovar, rejeitar, remover]
      responses:
        '200':
          description: Ação realizada
        '403':
          description: Apenas organizador pode gerenciar

  # RATING ENDPOINTS
  /matches/{matchId}/ratings:
    post:
      tags:
        - rating
      summary: Avaliar partida (após realização)
      security:
        - bearerAuth: []
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avaliacaoOrganizador:
                  type: object
                  properties:
                    pontualidade:
                      type: integer
                      minimum: 1
                      maximum: 5
                    comunicacao:
                      type: integer
                      minimum: 1
                      maximum: 5
                    estrutura:
                      type: integer
                      minimum: 1
                      maximum: 5
                    comentario:
                      type: string
                avaliacoesJogadores:
                  type: array
                  items:
                    type: object
                    properties:
                      userId:
                        type: integer
                      presenca:
                        type: boolean
                      espirito:
                        type: integer
                        minimum: 1
                        maximum: 5
                      comprometimento:
                        type: integer
                        minimum: 1
                        maximum: 5
                      comentario:
                        type: string
      responses:
        '201':
          description: Avaliações registradas
        '400':
          description: Partida ainda não realizada ou já avaliada

  /users/{userId}/ratings:
    get:
      tags:
        - rating
      summary: Ver avaliações de um usuário
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Histórico de avaliações
          content:
            application/json:
              schema:
                type: object
                properties:
                  comoJogador:
                    $ref: '#/components/schemas/EstatisticasJogador'
                  comoOrganizador:
                    $ref: '#/components/schemas/EstatisticasOrganizador'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        categoria:
          type: string
        sexo:
          type: string

    UsuarioCompleto:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        telefone:
          type: string
        sexo:
          type: string
        categoria:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        partidasJogadas:
          type: integer
        taxaComparecimento:
          type: number
        avaliacaoMedia:
          type: number
        dataCriacao:
          type: string
          format: date-time
        padrinho:
          type: object
          properties:
            id:
              type: integer
            nome:
              type: string

    UsuarioPublico:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        categoria:
          type: string
        partidasJogadas:
          type: integer
        taxaComparecimento:
          type: number
        avaliacaoMedia:
          type: number

    Convite:
      type: object
      properties:
        id:
          type: integer
        codigo:
          type: string
        emailConvidado:
          type: string
        status:
          type: string
          enum: [pendente, usado, expirado]
        dataGeracao:
          type: string
          format: date-time
        dataValidade:
          type: string
          format: date-time
        observacao:
          type: string

    Partida:
      type: object
      properties:
        id:
          type: integer
        organizador:
          $ref: '#/components/schemas/Usuario'
        data:
          type: string
          format: date
        horario:
          type: string
          format: time
        local:
          type: string
        endereco:
          type: string
        categoria:
          type: string
        sexoPermitido:
          type: string
        maxParticipantes:
          type: integer
        participantesConfirmados:
          type: integer
        custoTotal:
          type: number
        custoIndividual:
          type: number
        status:
          type: string
          enum: [nova, emAdesao, confirmada, encerrada, realizada]
        observacoes:
          type: string
        dataCriacao:
          type: string
          format: date-time

    PartidaCompleta:
      allOf:
        - $ref: '#/components/schemas/Partida'
        - type: object
          properties:
            participantes:
              type: array
              items:
                $ref: '#/components/schemas/Participante'
            listaEspera:
              type: array
              items:
                $ref: '#/components/schemas/Participante'

    Participante:
      type: object
      properties:
        usuario:
          $ref: '#/components/schemas/UsuarioPublico'
        status:
          type: string
          enum: [pendente, confirmado, rejeitado, desistiu]
        dataInscricao:
          type: string
          format: date-time
        pagamentoConfirmado:
          type: boolean

    EstatisticasJogador:
      type: object
      properties:
        totalPartidas:
          type: integer
        taxaComparecimento:
          type: number
        taxaDesistencia:
          type: number
        avaliacaoMedia:
          type: number
        ultimasAvaliacoes:
          type: array
          items:
            type: object
            properties:
              partida:
                type: string
              data:
                type: string
                format: date
              nota:
                type: number
              comentario:
                type: string

    EstatisticasOrganizador:
      type: object
      properties:
        totalPartidasOrganizadas:
          type: integer
        taxaRealizacao:
          type: number
        avaliacaoMedia:
          type: number
        ultimasAvaliacoes:
          type: array
          items:
            type: object
            properties:
              data:
                type: string
                format: date
              nota:
                type: number
              comentario:
                type: string